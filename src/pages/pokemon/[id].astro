---
import { undefined } from "astro:schema";
import Layout from "../../layouts/Layout.astro";
import {capitalizeFirstLetter, getPokemonsById, getPokemonsEvolutions, mapId, mapWHPokemon, 
        TypeColors, type PokemonBig, type PokemonType } from "../../models/PokemonModels";
const {id} = Astro.params;

export async function getStaticPaths() {
    const paths = [];
    for (let i = 1; i <= 400; i++) {
        paths.push({params: {id: i.toString()}});
    }
    return paths;
}

const pokemon : PokemonBig | undefined = await getPokemonsById(parseInt(id));
const evolutions : string | string[] | undefined = await getPokemonsEvolutions(parseInt(id)); 
let evolutionsData : PokemonBig [] | undefined = [];

// evolutions?.forEach(async evolution => {
//     evolutionsData = await getPokemonsById(evolution);
// });
---

<Layout title={pokemon!.basicData.name}>
    <section class="flex justify-evenly content-center 
    my-36">
    <div class="flex flex-col items-center text-center
    w-[450px] h-[450px]
    bg-slate-400/20 border-gray-500 border rounded-2xl">

        {
           

                evolutions?.map((evolution : string) => (
                    <p>{evolution}</p>
                ))
            
        }
       
    </div>

    <div class="flex flex-col items-center text-center
    w-[450px] h-[450px]
    bg-slate-400/20 border-gray-500 border rounded-2xl">
        <h2 class="text-5xl font-bold tracking-widest my-4">{capitalizeFirstLetter(pokemon!.basicData.name)}</h2>
        <h3 class="text-xs tracking-widest">No. {mapId(pokemon!.basicData.id)}</h3>
        <img src={pokemon!.basicData.image} alt={pokemon!.basicData.name} 
        class="h-52 w-52" transition:name=`media-image-${pokemon!.basicData.name}`/>
        <div class="flex flex-col space-x-1 mt-1 p-1 gap-2">
            <span class="font-medium text-lg tracking-wide">Height: {mapWHPokemon(pokemon!.height)} m</span>
            <span class="font-medium text-lg tracking-wide">Weight: {mapWHPokemon(pokemon!.weight)} kg</span>
        </div>
        <div class="flex flex-row space-x-1 mt-1 p-1 gap-2">
            {pokemon?.basicData.types.map((types : PokemonType) => (
                <p class=` ${TypeColors[types.type.name]} 
                opacity-80 rounded text-white text-center 
                font-semibold text-lg tracking-wide p-1.5 ` 
                >{types.type.name}</p>
            ))}
        </div>
    </div>
    </section>

</Layout>